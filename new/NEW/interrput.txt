;**************************************************************************
;* PROGRAM
;*	Meg_sec
;* DESCRIPTION
;*	
;*************************************************************************
		.include "m128def.inc"
;
		jmp Init		                 ; jmp is 2 word instruction to set correct vector
		nop			; Vector Addresses are 2 words apart
		reti			; External 0 interrupt  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; External 1 interrupt  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; External 2 interrupt  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; External 3 interrupt  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; External 4 interrupt  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; External 5 interrupt  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; External 6 interrupt  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; External 7 interrupt  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; Timer 2 Compare Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; Timer 2 Overflow Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; Timer 1 Capture  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; Timer1 CompareA  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; Timer 1 CompareB  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; Timer 1 Overflow  Vector 
		jmp TIM0_COMP		; Timer 0 Compare  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; Timer 0 Overflow interrupt  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; SPI  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; UART Receive  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; UDR Empty  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; UART Transmit  Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; ADC Conversion Complete Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; EEPROM Ready Vector 
		nop			; Vector Addresses are 2 words apart
		reti			; Analog Comparator  Vector 

.org		$0080			; start address well above interrupt table
;**************************************************************************
;* FUNCTION
;*	TIM0_COMP
;* DESCRIPTION
;*	stores SREG
;*************************************************************************
TIM0_COMP:	
		in R4,SREG		; save Sreg
		inc r17			; increment cycle
		nop
		cpi r17,$C8		; compare cycle with 200
		brne again		; if <> jump to again
		;now can jump to where I want to be when 
		cpi r17,$C8		; compare cycle with 200
		breq Show
		;out PORTB, r18		; send stuff to PORTB
        ;inc r18		        ; Increment the portB number
		clr r17			; clear cycle and start counting 
                                        ; again 200 interrupts
again:
		out SREG,r4		; restore sreg	
		reti			; Timer 0 Overflow interrupt code here 
;**************************************************************************
;* FUNCTION
;*	Init
;* DESCRIPTION
;*	Intialise the Stackpointer
;*	Intialise RAMPZ
;*	Intialise Timer 0 
;*	Intialise Timer 0 ooutput compare 
;*	Disable the Comparator to save power
;*	Intialise Port B for Output
;*	Set Global Interupt Flag
;*************************************************************************
Init:                
		; **** Stack Pointer Setup Code ****
		; Stack Pointer Setup 
		ldi r16,$0F
		out SPH,r16		; Stack Pointer High Byte 
		ldi r16, $FF		; Stack Pointer Setup 
		out SPL,r16		; Stack Pointer Low Byte 
                                   ;
   		; **** RAMPZ Setup Code ****  
		ldi  r16, $00		; 1 = EPLM acts on upper 64K
		out RAMPZ, r16		; 0 = EPLM acts on lower 64K
                                   ;
		; **** Timer0 Setup Code ****  
		ldi r16,$0C			; Timer 0 Setup
		out TCCR0, r16		; Timer - PRESCALE TCK0 BY 256
							; (devide the 8 Mhz clock by 256)
							; clear timer on OCR0 match
		ldi r16,$4e			; load OCR0 with n=78
		out OCR0,r16		; The counter will go every
                            ; n*256*125 nsec
                                   ;
		; **** Interrupts Setup Code ****  
		ldi r16, $02		; OCIE0
		out TIMSK, r16		; T0: Output compare match 
                                   ;
		; **** Comparator Setup Code ****  
		ldi r16,$80		; Comparator Disabled, Input Capture Disabled 
		out ACSR, r16		; Comparator Settings
                                   ;
		; **** Port B Setup Code ****  
		ldi r16, $FF		; 
		out DDRB , r16		; Port B Direction Register
		ldi r16, $FF		; Init value 
		out PORTB, r16		; Port B value
                                   ;
		sei			; Enable All Interrupts 
                                   ;
                ldi r17, $00
                ldi r18, $00

				ldi r26,$0
;**************************************************************************
;* FUNCTION
;*	Main
;                 Infinite Loop unless if something happens
;*************************************************************************


Show:
		inc r26
		out portb,r26 
		ret                   

Main:		
        nop
		nop
		nop
		nop

		
		rjmp main