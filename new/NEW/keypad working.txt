;  ** ATmega103(L) Assembly Language File - IAR Assembler Syntax **
;  ** Author : C. Foudas
;  ** Company : Imperial College, High Energy Physics division
;  ** Comment : This is an example of using the LCD display
;
.DEVICE ATmega128
.include "m128def.inc"	
;
		.ORG	$0
                                       RJMP Init
Init:                
   
		; ************* Stack Pointer Setup Code   
		ldi r16, $0F		; Stack Pointer Setup to 0x0FFF
		out SPH,r16		; Stack Pointer High Byte 
		ldi r16, $FF		; Stack Pointer Setup 
		out SPL,r16		; Stack Pointer Low Byte 
   
		; ******* RAMPZ Setup Code ****  lower memory page arithmetic
		ldi  r16, $00		; 1 = EPLM acts on upper 64K
		out RAMPZ, r16		; 0 = EPLM acts on lower 64K
   
		; ******* Sleep Mode And SRAM  *******
		;			; tell it we want read and write activity on RE WR
		ldi r16, $C0		; Idle Mode - SE bit in MCUCR not set
		out MCUCR, r16		; External SRAM Enable Wait State Enabled
   
		; ******* Comparator Setup Code ****  
		ldi r16,$80		; Comparator Disabled, Input Capture Disabled 
		out ACSR, r16		; Comparator Settings
   
		; ******* Port A Setup Code ****  
		ldi r16, $FF		; Address AD7 to AD0
		out DDRA, r16		; Port A Direction Register
		ldi r16, $00		; Init value 
		out PORTA, r16		; Port A value
   
		; ******* Port B Setup Code ****  
		ldi r16, $FF		; will set to outputs so i cab use Leds for debugging
		out DDRB , r16		; Port B Direction Register
		ldi r16, $00		; Who cares what is it....
		out PORTB, r16		; Port B value
   
		; ******* Port C Setup Code ****  
		ldi r16, $00		; Address AD15 to AD8
		out PORTC, r16		; Port C value
/*
		; this sets port  4-7 as outputs and porte 0-3 imputs
		ldi r16, $F0		; load r16 with 0-3 input
		out DDRE , r16		; Direction register
		ldi r16, $0F		; 4-7 output
		out PORTE, r16		; 
		nop nop nop nop nop nop nop
*/


Main:
		rcall waitforbuttonpress

		;ldi r22, portE
		;out portB, r22
		rjmp Main


waitforbuttonpress:
	ldi r21, $00   ;high 4-bit
	ldi r23, $10   ;multiplication factor
    ldi r19,$00    ; low 4-bit/ carrier
	ldi r22, $00
	ldi r18, $00
	
	; set keayboard out in 
	; this sets port  4-7 as outputs and porte 0-3 imputs
	ldi r16, $F0		; load r16 with 0-3 input
	out DDRE , r16		; Direction register
	ldi r16, $0F		; 4-7 output
	out PORTE, r16		; 
	rcall BigDEL

	
	
	; reading whats oan the keaythobar
	in r21, PINE ;getting value from pinE
	;ldi r22, $0F
	;sub r22, r21
	;mov r21, r22 ; Value for the key in r 21
	;lsl r21
	;lsl r21
	;lsl r21


	;mov r21, r19	; substract F
	;cpi r21, $0F
	
	;inverse the pin output input
	ldi r16, $0F		; load r16 with 0-3 input, reverse input and ouput
	out DDRE , r16		; Direction register
	ldi r16, $F0		; 4-7 output
	out PORTE, r16		; 
	rcall BigDEL
	;red PINE again
	in r18, PINE ;getting value from pinE
	;ldi r22, $F0
	;sub r22, r19
	;mov r19, r22 ; in r 19 result from the other 4 pins
	;cpi r19,$F0
	;subi r19, $F0
	;mul r19, r23  ;places high in r1 (the one we want i.e. $xx00 and low in r0

	;push r21
	add r21, r18 ;add 2 results

	;mov r22, r21
	;pop r21 ; r19 2nd, r 21 first, r22 combined
	;com r22
	;r 20 is our result total from both way of pin direction
	out PORTB, r21  ;ouput to LED R21 show
	ret
	;cpi r22, $00
	;brne waitforbuttonpress
	;ret


/*


;
;   
; Make R23 our flag register
;
                                      CLR r23
                                      SBR r23, $1	
;*****************************************************************************	
Main2:		
;
; Do not execute the initialisation every time...that
; would be stupid....
;
                                      SBRC r23, 0
                                      rcall Idisp
                                      SBRC r23, 0
                                      CBR r23, $1
;
                                      rcall Mess1Out
                                      rcall BigDel
                                      rcall CLRDIS
                                      rcall Mess2Out
                                      rcall BigDel
                                      rcall CLRDIS
;                                      
                                      rjmp Main2
;*******************************************************************************
;
Mess1:
.db 'C','o','s','t','w','e',' ','F','o','u','g','a','s', 'm'
Mess2:
.db 'I','m','p','e','r','i','a','l',' ','C','o','l','l','e','g','e'
;
Mess1Out:
              LDI ZH, HIGH(2*Mess1)
              LDI ZL, LOW(2*Mess1)
              LDI r18, 14 ;number of characters or bytes
Mess1More:
              LPM 
              MOV r17, r0
              sts $C000, r17
              rcall busylcd
              DEC r18
              BREQ Mess1End
              ADIW ZL, $01
              ;OUT PORTB, ZL
              RJMP Mess1More
Mess1End:     ret
;             
Mess2Out:
              LDI ZH, HIGH(2*Mess2)
              LDI ZL, LOW(2*Mess2)
              LDI r18, 16   ;number of characters or bytes
Mess2More:
              LPM 
              MOV r17, r0
              sts $C000, r17
              rcall busylcd
              DEC r18
              BREQ Mess2End
              ADIW ZL, $01
              ;OUT PORTB, ZL
              RJMP Mess2More
Mess2End:     ret

;
;*******************************************************************************
; Display Initialization routine
;
; Since we cannot rely that that Power Supply will have on power up
; the required by Hitachi Specs.....we do the initialization 'by hand'.
; Follow Blindly the White-Red Book of Hitachi.
; Hitachi Liquid Crystal Disply LCD Initialization Sequence.
;
Idisp:		
		RCALL DEL15ms                ; wait 15ms for things to relax after power up           
		ldi r16,    $30	         ; Hitachi says do it...
		sts   $8000,r16                      ; so i do it....
		RCALL DEL4P1ms             ; Hitachi says wait 4.1 msec
		sts   $8000,r16	         ; and again I do what I'm told
		rcall Del49ms
		sts   $8000,r16	         ; here we go again folks
                rcall busylcd		
		ldi r16, $3F	         ; Function Set : 2 lines + 5x7 Font
		sts  $8000,r16
                rcall busylcd
		ldi r16,  $08	         ;display off
		sts  $8000, r16
                rcall busylcd		
		ldi r16,  $01	         ;display on
		sts  $8000,  r16
                rcall busylcd
                ldi r16, $38	        ;function set
		sts  $8000, r16
		rcall busylcd
		ldi r16, $0E	        ;display on
		sts  $8000, r16
		rcall busylcd
		ldi r16, $06                           ;entry mode set increment no shift
		sts  $8000,  r16
                rcall busylcd
                clr r16
                ret
;
;**********************************************************************************
; This clears the display so we can start all over again
;
CLRDIS:
	        ldi r16,$01	; Clear Display send cursor 
		sts $8000,r16   ; to the most left position
		rcall busylcd
                ret
;**********************************************************************************
; A routine the probes the display BUSY bit
;
   
busylcd:        
        lds r16, $8000   ;access 
        sbrc r16, 7      ;check busy bit  7
        rjmp busylcd
        rcall BigDEL

        ret              ;return if clear
;
;********************   DELAY ROUTINES ********************************************
*/
BigDEL:
             rcall Del49ms
             rcall Del49ms
             rcall Del49ms
             rcall Del49ms
             rcall Del49ms
             ret
/*
DEL15ms:
;
; This is a 15 msec delay routine. Each cycle costs
; rcall           -> 3 CC
; ret              -> 4 CC
; 2*LDI        -> 2 CC 
; SBIW         -> 2 CC * 19997
; BRNE        -> 1/2 CC * 19997
; 

            LDI XH, HIGH(19997)
            LDI XL, LOW (19997)
COUNT:  
            SBIW XL, 1
            BRNE COUNT
            RET
;
DEL4P1ms:
            LDI XH, HIGH(5464)
            LDI XL, LOW (5464)
COUNT1:
            SBIW XL, 1
            BRNE COUNT1
            RET 
;
DEL100mus:
            LDI XH, HIGH(131)
            LDI XL, LOW (131)
COUNT2:
            SBIW XL, 1
            BRNE COUNT2
            RET 
*/
DEL49ms:
            LDI XH, HIGH(65535)
            LDI XL, LOW (65535)
			ret
/*
COUNT3:
            SBIW XL, 1
            BRNE COUNT3
            RET 

*/			