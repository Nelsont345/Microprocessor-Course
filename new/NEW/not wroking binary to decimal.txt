;  ** ATmega103(L) Assembly Language File - IAR Assembler Syntax **
;  ** Author : C. Foudas
;  ** Company : Imperial College, High Energy Physics division
;  ** Comment : This is an example of using the LCD display
;
;.DEVICE ATmega128
;.include "m128def.inc"	

.DEVICE ATmega128
.include "m128def.inc"
;
.def TempReg         =  r16
.def ADCChannel   =  r18
.def ADCDL           =  r19
.def ADCDH           =  r20
.def FlagReg           =  r23
.def DispVal    = r17
;
		.ORG	$0
                                       RJMP Init
Init:                
   
		; ************* Stack Pointer Setup Code   
		ldi r16, $0F		; Stack Pointer Setup to 0x0FFF
		out SPH,r16		; Stack Pointer High Byte 
		ldi r16, $FF		; Stack Pointer Setup 
		out SPL,r16		; Stack Pointer Low Byte 
   
		; ******* RAMPZ Setup Code ****  lower memory page arithmetic
		ldi  r16, $00		; 1 = EPLM acts on upper 64K
		out RAMPZ, r16		; 0 = EPLM acts on lower 64K
   
		; ******* Sleep Mode And SRAM  *******
		;			; tell it we want read and write activity on RE WR
		ldi r16, $C0		; Idle Mode - SE bit in MCUCR not set
		out MCUCR, r16		; External SRAM Enable Wait State Enabled
   
		; ******* Comparator Setup Code ****  
		ldi r16,$80		; Comparator Disabled, Input Capture Disabled 
		out ACSR, r16		; Comparator Settings
   
		; ******* Port A Setup Code ****  
		ldi r16, $FF		; Address AD7 to AD0
		out DDRA, r16		; Port A Direction Register
		ldi r16, $00		; Init value 
		out PORTA, r16		; Port A value
   
		; ******* Port B Setup Code ****  
		ldi r16, $FF		; will set to outputs so i cab use Leds for debugging
		out DDRB , r16		; Port B Direction Register
		ldi r16, $55		; Who cares what is it....
		out PORTB, r16		; Port B value
   
		; ******* Port C Setup Code ****  
		ldi r16, $00		; Address AD15 to AD8
		out PORTC, r16		; Port C value
		
		; ******* Port F Setup Code ****  
		;ldi r16, $00		; I/O: 
		;out DDRF, r16		; Port D Direction Register
		;ldi r16, $FF		; Init value 
		;out PORTF, r16		; Port D value		

		
		; ******* Port F Setup Code ****  
		;Analog : PF7 PF6 PF5 PF4 PF3 PF2 PF1 PF0  No Digital  
		

Main:
		
		out PORTB, r21  ;ouput to LED R21 show
		
		rcall ADCInit
		rcall Idisp

		/*
		;initiate at first run
		SBRC r23, 0
		rcall ADCInit
		SBRC r23, 0
        rcall Idisp
        SBRC r23, 0
        CBR  r23, $1
		out portE, ADCDL
		*/


        ldi   ADCChannel, 0
        rcall ADCsel
        call ADCTrig
		rcall Mess1Out
        rcall BigDel
        ;rcall CLRDIS
		out portb, ADCDL

		rjmp Main

ADCInit:
        	                  ; ******* ADC Setup Code ****  
	                  ldi TempReg, $83	            ; ADC Interrupt Disabled, ADC Enabled
					  ;0b10000011
	                  out ADCSRA, TempReg            ; ADC Free Run Mode, Prescaler:CK/8
                      ret
;
ADCsel:
                        out ADMUX, ADCChannel	   ; Channel Selection
                        ret
;
ADCTrig:                     
						SBI ADCSRA, 6                 ; Cause a Convertion
                        rcall DEL600mus
                        IN   ADCDL, ADCL              ; Read in Low Byte
                        IN   ADCDH, ADCH              ; Read in High Byte
ADCCLR:                    

						SBI ADCSRA, 4                  ; Reset ADIF
                        IN   TempReg,ADCSRA            ; Read in Status		                             
                        SBIC ADCSRA, 4                 ; Wait till the Interrupt flug
                        RJMP ADCCLR                   ; is cleared 

                        RET

convert_to_position:
	;r21 signal
	;r23 - ra
	;r24 - rb
	push r23
	Push r24

	;column
	sbrs r21,0
	ldi r23,$0
	sbrs r21,1
	ldi r23,$1
	sbrs r21,2
	ldi r23,$2
	sbrs r21,3
	ldi r23,$3
	
	;row
	sbrs r21,4
	ldi r24,$0
	sbrs r21,5
	ldi r24,$4
	sbrs r21,6
	ldi r24,$8
	sbrs r21,7
	ldi r24,$C

	;add
	add r23,r24
	mov r21,r23
	pop r23
	pop r24
	ret

waitforbuttonpress:
	ldi r21, $00   ;high 4-bit
	ldi r22, $00
	ldi r18, $00


	; set keayboard out in 
	; this sets port  4-7 as outputs and porte 0-3 imputs
	ldi r16, $F0		; load r16 with 0-3 input
	out DDRE , r16		; Direction register
	ldi r16, $0F		; 4-7 output
	out PORTE, r16		; 
	rcall BigDEL
	in r21, PINE ;getting value from pinE	
	
	                    
	;inverse the pin output input
	ldi r16, $0F		; load r16 with 0-3 input, reverse input and ouput
	out DDRE , r16		; Direction register
	ldi r16, $F0		; 4-7 output
	out PORTE, r16		; 
	rcall BigDEL
	in r18, PINE ;getting value from pinE, red PINE again


	;push r21 ~~~~~~~~~~~~~~~~~~ R21 is the result of reading the key
	add r21, r18 ;add 2 results
	
	cpi r21, $FF
	breq waitforbuttonpress    ;leaves waiting for button, if value input is not $FF
	ret



	
 
Mess1:
;
; This Routine will get the result from the 2 ATmega103 ADC
; registers (put on ADCDL and ADCDH)  and it will display on the 
; LCD the corresponding HEX characters
;
.db '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
;
;
Mess1Out:
;
; MSB
;
                             MOV TempReg, ADCDH
                             ANDI TempReg, $03 
                             LDI ZH, HIGH(2*Mess1)
                             LDI ZL, LOW(2*Mess1)
                             ADD      ZL, TempReg
                             BRCC  NCarry2
                             INC ZH
NCarry2:              LPM
                             MOV TempReg, r0
                             ;sts $C000, TempReg   ;outputs hex, digit 1
                             rcall busylcd
; 
; LSB
; 

;
                             MOV TempReg, ADCDL
                             ANDI TempReg, $F0
                             LSR  TempReg
                             LSR  TempReg
                             LSR  TempReg
                             LSR  TempReg
                             LDI ZH, HIGH(2*Mess1)
                             LDI ZL, LOW(2*Mess1)
                             ADD      ZL, TempReg
                             BRCC  NCarry1
                             INC ZH
NCarry1:              LPM 
                             MOV TempReg, r0
                             ;sts $C000, TempReg   ;outputs hex, digit 2
                             rcall busylcd


                             MOV TempReg, ADCDL
                             ANDI TempReg, $0F
                             LDI ZH, HIGH(2*Mess1)
                             LDI ZL, LOW(2*Mess1)
                             ADD      ZL, TempReg
                             BRCC  NoCarry
                             INC ZH
NoCarry:              LPM 
                             MOV TempReg, r0
                             ;sts $C000, TempReg   ;outputs hex, digit 3
                             rcall busylcd
		rcall DisplayDecimal	;dispaly decimal value
                             ret



DisplayDecimal:			; Display voltage, scaled to 256=1volt
	;out portB, ADCDL
	push TempReg
	ldi TempReg, $0A       ;multily factor
	mov DISPVal,ADCDH		; copy high bits for display
	rcall DispDec		; calls routine to display decimal

	ldi DISPVal, 10		; display decimal point
	rcall DispDec	; calls routine to display character

	mul ADCDL,TempReg		; ADCDHx10 result to r1:r0 ; was ADCDH
	;rcall check
	
	mov DISPval,r1		; copy high bits for display
	rcall DispDec		; calls routine to display decimal

	mul ADCDL,TempReg		; r0x10 result to r1:r0 
	mov DISPval,r1		; copy high bits for display
	rcall DispDec		; calls routine to display decimal
/*
	mul r0,TempReg		; r0x10 result to r1:r0 
	mov DISPval,r1		; copy high bits for display
	rcall DispDec		; calls routine to display decimal
*/
	pop TempReg
	ret



DispDec:
.db '0','1','2','3','4','5','6','7','8','9','.',','

DispDec1:
			LDI ZH, HIGH(2*DispDec)
            LDI ZL, LOW(2*DispDec)
            add ZL, DISPval
	;out portB, PortDISPval

	lpm
	push r23
	mov r23, r0
	sts $C000, r0  ;for $30 outputs 0 ;was r0 before

	pop r23
	rcall busylcd    
	rcall BigDEL
	ret

check:
	push r21
	push r22
	mov r21, r1
	ldi r22, $30
	add r21, r22
	sts $C000, r21
	rcall busylcd    
	rcall BigDEL
	pop r21
	pop r22
	ret

;
;*******************************************************************************
; Display Initialization routine
;
; Since we cannot rely that that Power Supply will have on power up
; the required by Hitachi Specs.....we do the initialization 'by hand'.
; Follow Blindly the White-Red Book of Hitachi.
; Hitachi Liquid Crystal Disply LCD Initialization Sequence.
;
Idisp:		
		
		RCALL DEL15ms                ; wait 15ms for things to relax after power up           
		ldi r16,    $30	         ; Hitachi says do it...
		sts   $8000,r16                      ; so i do it....
		RCALL DEL4P1ms             ; Hitachi says wait 4.1 msec
		sts   $8000,r16	         ; and again I do what I'm told
		rcall Del49ms
		sts   $8000,r16	         ; here we go again folks
                rcall busylcd		
		ldi r16, $3F	         ; Function Set : 2 lines + 5x7 Font
		sts  $8000,r16
                rcall busylcd
		ldi r16,  $08	         ;display off
		sts  $8000, r16
                rcall busylcd		
		ldi r16,  $01	         ;display on
		sts  $8000,  r16
                rcall busylcd
                ldi r16, $38	        ;function set
		sts  $8000, r16
		rcall busylcd
		ldi r16, $0E	        ;display on
		sts  $8000, r16
		rcall busylcd
		ldi r16, $06                           ;entry mode set increment no shift
		sts  $8000,  r16
                rcall busylcd
                clr r16
                ret
;
;**********************************************************************************
; This clears the display so we can start all over again
;
CLRDIS:
	        ldi r16,$01	; Clear Display send cursor 
		sts $8000,r16   ; to the most left position
		rcall busylcd
                ret
;**********************************************************************************
; A routine the probes the display BUSY bit
;
   
busylcd:     
  
        lds r16, $8000   ;access 
        sbrc r16, 7      ;check busy bit  7
        rjmp busylcd
        rcall BigDEL

        ret              ;return if clear

;********************   DELAY ROUTINES ********************************************
BigDEL:
             rcall Del49ms
             ;rcall Del49ms
             ;rcall Del49ms
             ;rcall Del49ms
             ;rcall Del49ms
             ret
;
DEL15ms:
;
; This is a 15 msec delay routine. Each cycle costs
; rcall           -> 3 CC
; ret              -> 4 CC
; 2*LDI        -> 2 CC 
; SBIW         -> 2 CC * 19997
; BRNE        -> 1/2 CC * 19997
; 

            LDI XH, HIGH(19997)
            LDI XL, LOW (19997)
COUNT:  
            SBIW XL, 1
            BRNE COUNT
            RET
;
DEL4P1ms:
            LDI XH, HIGH(5464)
            LDI XL, LOW (5464)
COUNT1:
            SBIW XL, 1
            BRNE COUNT1
            RET 
;
DEL100mus:
            LDI XH, HIGH(131)
            LDI XL, LOW (131)
COUNT2:
            SBIW XL, 1
            BRNE COUNT2
            RET 
;
DEL49ms:
            LDI XH, HIGH(65535) ;65535
            LDI XL, LOW (65535)
COUNT3:
            SBIW XL, 1
            BRNE COUNT3
            RET 
DEL600mus:
            LDI XH, HIGH(798)
            LDI XL, LOW (798)
COUNT4:
            SBIW XL, 1
            BRNE COUNT4
            RET 

